@startuml
!theme cerulean
participant "API" as API
participant "Controller" as Ctrl
participant "Service" as Service
participant "Repository" as Repo
participant "User" as User
participant "IPasswordManager" as PassManager
participant "Mapper" as Mapper
participant "EventEmitter" as Emitter

--> API: POST /api/reset-password
API -> Ctrl: resetPassword(request)
activate Ctrl
Ctrl -> Ctrl: {email, resetCode, newPassword} = req.body
Ctrl -> Service: resetPassword(email, resetCode, newPassword)
activate Service
Service -> Repo: user = getUserByEmail(email)
activate Repo
deactivate Repo
alt user not found
    Service --> API: throw UserNotFoundError
        
    <-- API: 404 UserNotFoundError
    note right of Ctrl
        Finish the workflow
    end note
end
Service -> User: user.isActive()
activate User
deactivate User
alt user is not active
    Service --> API: throw BadRequestError
        
    <-- API: 400 BadRequestError
    note right of Ctrl
        Finish the workflow
    end note
end

alt user.resetCode && user.resetCode.isExpired()
    Service --> API: throw BadRequestError
        
    <-- API: 400 BadRequestError: Reset code has expired
    note right of Ctrl
        Finish the workflow
    end note
end

Service -> User: isResetCodeCorrect = user.validateResetCode(resetCode)
activate User
deactivate User

alt reset code is incorrect
    Service --> API: throw UserNotFoundError
        
    <-- API: 404 UserNotFoundError
    note right of Ctrl
        Finish the workflow
    end note
end

Service -> PassManager: hashedPassword = hashPassword(newPassword)
activate PassManager
deactivate PassManager

Service -> User: isPasswordValid = User.isPasswordValid(newPassword, passwordRequirements)
activate User
deactivate User
alt password is not valid
    Service --> API: throw InvalidUserError
        
    <-- API: 400 InvalidUserError
    note right of Ctrl
        Finish the workflow
    end note
end

Service -> User: user.setPassword(hashedPassword)
activate User
Service -> User: user.clearResetCode()
deactivate User

Service -> Repo: updateUser(user)
activate Repo
deactivate Repo

Service -> Mapper: userDto = UserMapper.toDto(user)
activate Mapper
deactivate Mapper
Service -> Emitter: emit('PasswordChanged', userDto)
activate Emitter
deactivate Emitter
Service --> Ctrl
deactivate Service
Ctrl --> API
deactivate Ctrl
<-- API : 204


@enduml